# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
msgid ""
msgstr ""
"Project-Id-Version: Apache Traffic Server 4.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-11-08 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../admin/reverse-proxy-http-redirects.en.rst:4
#: ../../admin/reverse-proxy-http-redirects.en.rst:24
msgid "Reverse Proxy and HTTP Redirects"
msgstr "リバースプロキシーと HTTP リダイレクト"

#: ../../admin/reverse-proxy-http-redirects.en.rst:26
msgid ""
"As a reverse proxy cache, Traffic Server serves requests on behalf of "
"origin servers. Traffic Server is configured in such a way that it appears "
"to clients like a normal origin server."
msgstr ""
"リバースプロキシーキャッシュとして、Traffic Server はオリジンサーバーの代わ"
"りにリクエストに応えます。Traffic Server はクライアントには通常のオリジン"
"サーバーに見えるように設定されます。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:34
msgid "Understanding Reverse Proxy Caching"
msgstr "リバースプロキシーキャッシュを理解する"

#: ../../admin/reverse-proxy-http-redirects.en.rst:46
msgid "Reverse Proxy Solutions"
msgstr "リバースプロキシーによる対応策"

#: ../../admin/reverse-proxy-http-redirects.en.rst:48
msgid ""
"There are many ways to use Traffic Server as a reverse proxy. Below are a "
"few example scenarios."
msgstr ""
"Traffic Server をリバースプロキシーとして使う方法はたくさんあります。以下は"
"いくつかの例です。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:58
msgid "Offloading Heavily-Used Origin Servers"
msgstr "使用頻度の高いオリジンサーバーの負荷の軽減"

#: ../../admin/reverse-proxy-http-redirects.en.rst:72
msgid "Traffic Server as reverse proxy for a pair of origin servers"
msgstr "1組のオリジンサーバーのリバースプロキシーとして動く Traffic Server"

#: ../../admin/reverse-proxy-http-redirects.en.rst:75
msgid "Delivering Content in Geographically-Dispersed Areas"
msgstr "分散した地域でのコンテンツの配信"

#: ../../admin/reverse-proxy-http-redirects.en.rst:91
msgid "Providing Security for an Origin Server"
msgstr "オリジンサーバーへのセキュリティの提供"

#: ../../admin/reverse-proxy-http-redirects.en.rst:106
msgid "How Does Reverse Proxy Work?"
msgstr "リバースプロキシーの動作"

#: ../../admin/reverse-proxy-http-redirects.en.rst:119
msgid ""
"To avoid a DNS conflict, the origin server’s hostname and its advertised "
"hostname must not be the same."
msgstr ""
"DNS の衝突を避けるため、オリジンサーバーのホスト名とその広告されたホスト名は"
"同じであってはなりません。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:123
msgid "HTTP Reverse Proxy"
msgstr "HTTP リバースプロキシー"

#: ../../admin/reverse-proxy-http-redirects.en.rst:125
msgid ""
"In reverse proxy mode, Traffic Server serves HTTP requests on behalf of a "
"web server. The figure below illustrates how Traffic Server in reverse "
"proxy mode serves an HTTP request from a client browser."
msgstr ""
"リバースプロキシーモードでは、Traffic Server は HTTP リクエストをウェブサー"
"バーの代わりに受け取ります。下の図は リバースプロキシーモードの Traffic "
"Server がどのようにクライアントからの HTTP リクエストを受け取るのかを説明し"
"ています。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:133
msgid "HTTP reverse proxy"
msgstr "HTTP リバースプロキシー"

#: ../../admin/reverse-proxy-http-redirects.en.rst:135
msgid "The figure above demonstrates the following steps:"
msgstr "上の図は次のステップを説明しています。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:139
msgid ""
"A client browser sends an HTTP request addressed to a host called ``www."
"host.com`` on port 80. Traffic Server receives the request because it is "
"acting as the origin server (the origin server’s advertised hostname "
"resolves to Traffic Server)."
msgstr ""
"クライアントブラウザが ``www.host.com`` の 80 番ポートに HTTP リクエストを送"
"信します。Traffic Server はオリジンサーバーとして振る舞っているのでこのリク"
"エストを受け取ります(オリジンサーバーの広告されたホスト名は Traffic Server "
"へ解決されるように広告されています)。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:165
msgid "To configure HTTP reverse proxy, you must perform the following tasks:"
msgstr ""
"HTTP リバースプロキシーを設定するためには、次のタスクを行う必要があります"

#: ../../admin/reverse-proxy-http-redirects.en.rst:167
msgid ""
"Create mapping rules in the :file:`remap.config` file (refer to `Creating "
"Mapping Rules for HTTP Requests`_). ::"
msgstr ""
":file:`remap.config` ファイルにマッピングルールを作成する (`HTTP リクエスト"
"用マッピングルールの作成`_\\ を参照してください) 。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:172
msgid ""
"Enable the reverse proxy option (refer to `Enabling HTTP Reverse Proxy`_)."
msgstr ""
"リバースプロキシーオプションを有効にする(`HTTP リバースプロキシーの有効化`_"
"\\ を参照してください)。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:174
msgid ""
"In addition to the tasks above, you can also `Setting Optional HTTP Reverse "
"Proxy Options`_."
msgstr ""
"上のタスクに加え、\\ `省略可能な HTTP リバースプロキシーオプションの設定`_"
"\\ を行うこともできます。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:177
msgid "Handling Origin Server Redirect Responses"
msgstr "オリジンサーバーのリダイレクトレスポンスを扱う"

#: ../../admin/reverse-proxy-http-redirects.en.rst:187
msgid ""
"To readdress redirects, Traffic Server uses reverse-map rules. Unless you "
"have :ts:cv:`proxy.config.url_remap.pristine_host_hdr` enabled (the "
"default) you should generally set up a reverse-map rule for each map rule. "
"To create reverse-map rules, refer to `Using Mapping Rules for HTTP "
"Requests`_."
msgstr ""
"リダイレクト先を書き直すために、Traffic Server はリバースマップルールを使用"
"します。 :ts:cv:`proxy.config.url_remap.pristine_host_hdr` を有効にしていな"
"い限り(それがデフォルトです)、一般的には各マップルールに対してリバースマップ"
"ルールを用意すべきです。リバースマップルールを作成するには `HTTP リクエスト"
"用マッピングルールの使用`_\\ を参照してください。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:194
msgid "Using Mapping Rules for HTTP Requests"
msgstr "HTTP リクエスト用マッピングルールの使用"

#: ../../admin/reverse-proxy-http-redirects.en.rst:196
msgid "Traffic Server uses two types of mapping rules for HTTP reverse proxy."
msgstr ""
"Traffic Server は HTTP リバースプロキシー用に2タイプのマッピングルールを使用"
"します。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:199
msgid "map rule"
msgstr "マップルール"

#: ../../admin/reverse-proxy-http-redirects.en.rst:211
msgid ""
"The host in both URLs must be the same. If the request URL contains an "
"unqualified hostname, then it will never match a target URL with a fully-"
"qualified hostname."
msgstr ""
"URL のホストが同じであること。もしリクエスト URL が修飾されていないホスト名"
"を含んでいる場合、完全修飾されたホスト名を含むターゲット URL にはマッチしま"
"せん。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:215
msgid ""
"The ports in both URLs must be the same. If no port is specified in a URL, "
"then the default port for the scheme of the URL is used."
msgstr ""
"ポートが同じであること。もし URL にポートが指定されていない場合、その URL ス"
"キームのデフォルトのポートが使用されます。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:230
msgid "reverse-map rule"
msgstr "リバースマップルール"

#: ../../admin/reverse-proxy-http-redirects.en.rst:243
msgid ""
"Traffic Server uses ``reverse_map`` rules to prevent clients (that receive "
"redirects from origin servers) from bypassing Traffic Server and directly "
"accessing the origin servers. In many cases the client would be hitting a "
"wall because ``realhost.com`` actually does not resolve for the client. (E."
"g.: Because it's running on a port shielded by a firewall, or because it's "
"running on a non-routable LAN IP)"
msgstr ""
"Traffic Server は (オリジンサーバーからリダイレクト指示を受けた) クライアン"
"トが Traffic Server をバイパスしてオリジンサーバーに直接アクセスすることを防"
"ぐために ``reverse_map`` ルールを使用します。クライアントが壁にぶつかる多く"
"のケースは ``realhost.com`` が実際にはクライアントには解決できない場合です。"
"(例: ファイアーウォールでポートが塞がれている、到達不可能な LAN の IP で動い"
"ている)"

#: ../../admin/reverse-proxy-http-redirects.en.rst:259
msgid "Creating Mapping Rules for HTTP Requests"
msgstr "HTTP リクエスト用マッピングルールの作成"

#: ../../admin/reverse-proxy-http-redirects.en.rst:265
#: ../../admin/reverse-proxy-http-redirects.en.rst:276
#: ../../admin/reverse-proxy-http-redirects.en.rst:321
msgid ""
"Run the command :option:`traffic_line -x` to apply the configuration "
"changes."
msgstr ""
"設定の変更を適用するために :option:`traffic_line -x` コマンドを実行してくだ"
"さい。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:268
msgid "Enabling HTTP Reverse Proxy"
msgstr "HTTP リバースプロキシーの有効化"

#: ../../admin/reverse-proxy-http-redirects.en.rst:279
msgid "Setting Optional HTTP Reverse Proxy Options"
msgstr "省略可能な HTTP リバースプロキシーオプションの設定"

#: ../../admin/reverse-proxy-http-redirects.en.rst:281
msgid ""
"Traffic Server provides several reverse proxy configuration options in :"
"file:`records.config` that enable you to:"
msgstr ""
"Traffic Server は :file:`records.config` でいくつかのリバースプロキシー設定"
"オプションを提供し次のことを可能にします。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:301
msgid "Redirecting HTTP Requests"
msgstr "HTTP リクエストのリダイレクト"

#: ../../admin/reverse-proxy-http-redirects.en.rst:303
msgid ""
"You can configure Traffic Server to redirect HTTP requests without having "
"to contact any origin servers. For example, if you redirect all requests "
"for ``http://www.ultraseek.com`` to ``http://www.server1.com/products/"
"portal/search/``, then all HTTP requests for ``www.ultraseek.com`` go "
"directly to ``www.server1.com/products/portal/search``."
msgstr ""
"Traffic Server をどのオリジンサーバーにもコンタクトさせることなく HTTP リク"
"エストをリダイレクトするように設定できます。例えば、``http://www.ultraseek."
"com`` へのすべてのリクエストを```http://www.server1.com/products/portal/"
"search/`` にリダイレクトする場合はすべての ``www.ultraseek.com`` への HTTP "
"リクエストは直接 ``www.server1.com/products/portal/search`` に向かいます。"

#: ../../admin/reverse-proxy-http-redirects.en.rst:324
msgid "Example"
msgstr "例"

#: ../../admin/reverse-proxy-http-redirects.en.rst:326
msgid ""
"The following permanently redirects all HTTP requests for ``www.server1."
"com`` to ``www.server2.com``: ::"
msgstr ""
"次の設定は ``www.server1.com`` へのすべての HTTP リクエストを恒久的に ``www."
"server2.com`` へリダイレクトします。 ::"

#: ../../admin/reverse-proxy-http-redirects.en.rst:36
msgid ""
"With *forward proxy caching*, Traffic Server handles web requests to origin "
"servers on behalf of the clients requesting the content. *Reverse proxy "
"caching* (also known as *server acceleration*) is different because Traffic "
"Server acts as a proxy cache on behalf of the origin servers that store the "
"content. Traffic Server is configured to behave outwardly as origin server "
"which the client is trying to connect to. In a typical scenario the "
"advertised hostname of the origin server resolves to Traffic Server, which "
"serves client requests directly, fetching content from the true origin "
"server when necessary."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:51
msgid "Offload heavily-used origin servers."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:53
msgid "Deliver content efficiently in geographically distant areas."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:55
msgid ""
"Provide security for origin servers that contain sensitive information."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:60
msgid ""
"Traffic Server can accept requests on behalf of the origin server and "
"improve the speed and quality of web serving by reducing load and hot spots "
"on backup origin servers. For example, a web hoster can maintain a scalable "
"Traffic Server system with a set of low-cost, low-performance, less-"
"reliable PC origin servers as backup servers. In fact, a single Traffic "
"Server can act as the virtual origin server for multiple backup origin "
"servers, as shown in the figure below."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:77
msgid ""
"Traffic Server can be used in reverse proxy mode to accelerate origin "
"servers that provide content to areas not located within close geographical "
"proximity. Caches are typically easier to manage and are more cost-"
"effective than replicating data. For example, Traffic Server can be used as "
"a mirror site on the far side of a trans-Atlantic link to serve users "
"without having to fetch the request and content across expensive, or higher "
"latency, international connections. Unlike replication, for which hardware "
"must be configured to replicate all data and to handle peak capacity, "
"Traffic Server dynamically adjusts to optimally use the serving and storing "
"capacity of the hardware. Traffic Server is also designed to keep content "
"fresh automatically, thereby eliminating the complexity of updating remote "
"origin servers."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:93
msgid ""
"Traffic Server can be used in reverse proxy mode to provide security for an "
"origin server. If an origin server contains sensitive information that you "
"want to keep secure inside your firewall, then you can use a Traffic Server "
"outside the firewall as a reverse proxy for that origin server. When "
"outside clients try to access the origin server, the requests instead go to "
"Traffic Server. If the desired content is not sensitive, then it can be "
"served from the cache. If the content is sensitive and not cacheable, then "
"Traffic Server obtains the content from the origin server (the firewall "
"allows only Traffic Server access to the origin server). The sensitive "
"content resides on the origin server, safely inside the firewall."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:108
msgid ""
"When a browser makes a request, it normally sends that request directly to "
"the origin server. When Traffic Server is in reverse proxy mode, it "
"intercepts the request before it reaches the origin server. Typically, this "
"is done by setting up the DNS entry for the origin server (i.e., the origin "
"server's advertised hostname) so it resolves to the Traffic Server IP "
"address. When Traffic Server is configured as the origin server, the "
"browser connects to Traffic Server rather than the origin server. For "
"additional information, see `HTTP Reverse Proxy`_."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:144
msgid ""
"Traffic Server locates a map rule in the :file:`remap.config` file and "
"remaps the request to the specified origin server (``realhost.com``)."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:147
msgid ""
"If the request cannot be served from cache, Traffic Server opens a "
"connection to the origin server (or more likely, uses an existing "
"connection it has pre-established), retrieves the content, and optionally "
"caches it for future use."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:152
msgid ""
"If the request was a cache hit and the content is still fresh in the cache, "
"or the content is now available through Traffic Server because of step 3, "
"Traffic Server sends the requested object to the client from the cache "
"directly."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:159
msgid ""
"Traffic Server, when updating its own cache from the origin server, will "
"simultaneously deliver that content to the client while updating its cache "
"database. The response to the client containing the requested object will "
"begin as soon as Traffic Server has received and processed the full "
"response headers from the origin server."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:179
msgid ""
"Origin servers often send redirect responses back to browsers redirecting "
"them to different pages. For example, if an origin server is overloaded, "
"then it might redirect browsers to a less loaded server. Origin servers "
"also redirect when web pages have moved to different locations. When "
"Traffic Server is configured as a reverse proxy, it must readdress "
"redirects from origin servers so that browsers are redirected to Traffic "
"Server and not to another origin server."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:201
msgid ""
"A *map rule* translates the URL in client requests into the URL where the "
"content is located. When Traffic Server is in reverse proxy mode and "
"receives an HTTP client request, it first constructs a complete request URL "
"from the relative URL and its headers. Traffic Server then looks for a "
"match by comparing the complete request URL with its list of target URLs "
"in :file:`remap.config`. For the request URL to match a target URL, the "
"following conditions must be true:"
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:209
msgid "The scheme of both URLs must be the same."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:218
msgid ""
"The path portion of the target URL must match a prefix of the request URL "
"path."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:221
msgid ""
"If Traffic Server finds a match, then it translates the request URL into "
"the replacement URL listed in the map rule: it sets the host and path of "
"the request URL to match the replacement URL. If the URL contains path "
"prefixes, then Traffic Server removes the prefix of the path that matches "
"the target URL path and substitutes it with the path from the replacement "
"URL. If two mappings match a request URL, then Traffic Server applies the "
"first mapping listed in :file:`remap.config`."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:232
msgid ""
"A *reverse-map rule* translates the URL in origin server redirect responses "
"to point to Traffic Server so that clients are redirected to Traffic Server "
"instead of accessing an origin server directly. For example, if there is a "
"directory ``/pub`` on an origin server at ``www.molasses.com`` and a client "
"sends a request to that origin server for ``/pub``, then the origin server "
"might reply with a redirect by sending the Header ``Location: http://"
"realhost.com/pub/`` to let the client know that it was a directory it had "
"requested, not a document (a common use of redirects is to normalize URLs "
"so that clients can bookmark documents properly)."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:250
msgid ""
"Both map and reverse-map rules consist of a *target* (origin) URL and a "
"*replacement* (destination) URL. In a *map rule*, the target URL points to "
"Traffic Server and the replacement URL specifies where the original content "
"is located. In a *reverse-map rule*, the target URL specifies where the "
"original content is located and the replacement URL points to Traffic "
"Server. Traffic Server stores mapping rules in :file:`remap.config` located "
"in the Traffic Server ``config`` directory."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:261
msgid "To create mapping rules:"
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:263
msgid "Enter the map and reverse-map rules into :file:`remap.config`."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:270
msgid "To enable HTTP reverse proxy:"
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:272
msgid ""
"Edit :ts:cv:`proxy.config.reverse_proxy.enabled` in :file:`records."
"config`. ::"
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:284
msgid ""
"Configure Traffic Server to retain the client host header information in a "
"request during translation. See :ts:cv:`proxy.config.url_remap."
"pristine_host_hdr`."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:288
msgid ""
"Configure Traffic Server to serve requests only to the origin servers "
"listed in the mapping rules. As a result, requests to origin servers not "
"listed in the mapping rules are not served. See :ts:cv:`proxy.config."
"url_remap.remap_required`."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:293
msgid ""
"Specify an alternate URL to which incoming requests from older clients ,"
"such as ones that do not provide ``Host`` headers, are directed. See :ts:cv:"
"`proxy.config.header.parse.no_host_url_redirect`."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:297
msgid ""
"Run the command :option:`traffic_line -x` to apply any of these "
"configuration changes."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:310
msgid ""
"You can configure Traffic Server to perform permanent or temporary "
"redirects. *Permanent redirects* notify the browser of the URL change (by "
"returning the HTTP status code ``301``) so that the browser can update "
"bookmarks. *Temporary redirects* notify the browser of the URL change for "
"the current request only (by returning the HTTP status code ``307`` )."
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:317
msgid "To set redirect rules:"
msgstr ""

#: ../../admin/reverse-proxy-http-redirects.en.rst:319
msgid ""
"For each redirect you want to set enter a mapping rule in :file:`remap."
"config`."
msgstr ""

#~ msgid ""
#~ "With **forward proxy caching**, Traffic Server handles web requests to "
#~ "distant origin servers on behalf of the clients requesting the content. "
#~ "**Reverse proxy caching** (also known as **server acceleration** or "
#~ "**virtual web hosting**) is different because Traffic Server acts as a "
#~ "proxy cache on behalf of the origin servers that store the content. "
#~ "Traffic Server is configured to be *the* origin server which the client "
#~ "is trying to connect to. In a typical scenario the advertised hostname "
#~ "of the origin server resolves to Traffic Server, which acts as the real "
#~ "origin server."
#~ msgstr ""
#~ "\\ **フォワードプロキシーキャッシュ**\\ の場合、Traffic Server はコンテン"
#~ "ツをリクエストしたクライアントに代わって遠くはなれたオリジンサーバーへの"
#~ "リクエストを取り扱います。\\ **リバースプロキシーキャッシュ**\\ (\\ **"
#~ "サーバーアクセラレーション**\\ や\\ **バーチャルウェブホスティング**\\ と"
#~ "しても知られています)では Traffic Server がコンテンツを持っているオリジン"
#~ "サーバーに代わってプロキシーキャッシュとして振る舞う点が異なります。"
#~ "Traffic Server はクライアントが接続しようとしている\\ *その*\\ オリジン"
#~ "サーバーとなるように設定されます。典型的なシナリオとしては、オリジンサー"
#~ "バーの広告されたホスト名が本当のオリジンサーバーのように振る舞う Traffic "
#~ "Server へ解決されます。"

#~ msgid "You can use Traffic Server in reverse proxy mode to:"
#~ msgstr ""
#~ "Traffic Server をリバースプロキシーモードとして使うことでできること"

#~ msgid "Offload heavily-used origin servers"
#~ msgstr "使用頻度の高いオリジンサーバーの負荷を軽減する"

#~ msgid "Deliver content efficiently in geographically distant areas"
#~ msgstr "地理的に離れた地域に効率的にコンテントを配信する"

#~ msgid ""
#~ "Provide security for origin servers that contain sensitive information"
#~ msgstr "センシティブな情報を含むオリジンサーバーにセキュリティを提供する"

#~ msgid ""
#~ "Traffic Server can absorb requests to the main origin server and improve "
#~ "the speed & quality of web serving by reducing load and hot spots on "
#~ "backup origin servers. For example, a web hoster can maintain a scalable "
#~ "Traffic Server serving engine with a set of low-cost, low-performance, "
#~ "less-reliable PC origin servers as backup servers. In fact, a single "
#~ "Traffic Server can act as the virtual origin server for multiple backup "
#~ "origin servers, as shown in the figure below."
#~ msgstr ""
#~ "Traffic Server は主となるオリジンサーバーへのリクエストを吸収できるほか、"
#~ "バックアップオリジンサーバーの負荷とホットスポットを低減することでWeb の"
#~ "提供スピードと品質を向上させます。例えば、Web をホストする人は低コストで"
#~ "低パフォーマンスで信頼性の低い PC によるオリジンサーバーをバックアップ"
#~ "サーバーとしたエンジンを提供するスケーラブルな Traffic Server を維持する"
#~ "ことができます。実際、下記の図に示すように、1台の Traffic Server は複数の"
#~ "バックアップオリジンサーバーのために仮想的なオリジンサーバーとして振る舞"
#~ "うことが可能です。"

#~ msgid ""
#~ "Traffic Server can be used in reverse proxy mode to accelerate origin "
#~ "servers that provide content to areas not located within close "
#~ "geographical proximity. Caches are typically easier to manage and are "
#~ "more cost-effective than replicating data. For example, Traffic Server "
#~ "can be used as a mirror site on the far side of a trans-Atlantic link to "
#~ "serve users without having to fetch the request and content across "
#~ "expensive international connections. Unlike replication, for which "
#~ "hardware must be configured to replicate all data and to handle peak "
#~ "capacity, Traffic Server dynamically adjusts to optimally use the "
#~ "serving and storing capacity of the hardware. Traffic Server is also "
#~ "designed to keep content fresh automatically, thereby eliminating the "
#~ "complexity of updating remote origin servers."
#~ msgstr ""
#~ "Traffic Server は地理的に近接していないエリアにコンテンツを提供するオリジ"
#~ "ンサーバーを加速するためにリバースプロキシーモードで使用できます。キャッ"
#~ "シュはレプリケーションよりもコストパフォーマンスが高く、一般的により簡単"
#~ "です。例えば、高価な国をまたぐコネクションを使ってリクエストやコンテンツ"
#~ "を取得することなく大西洋の向こう側のミラーサイトとして Traffic Server を"
#~ "利用することができます。全データを複製しピークキャパシティも扱うレプリ"
#~ "ケーションとは異なり、Traffic Server はハードウェアのキャパシティを最適に"
#~ "利用するよう動的に順応します。Traffic Server は自動的にコンテンツを新鮮に"
#~ "保つようにも設計されているので、リモートオリジンサーバーをアップデートす"
#~ "る複雑さも除去できます。"

#~ msgid ""
#~ "Traffic Server can be used in reverse proxy mode to provide security for "
#~ "an origin server. If an origin server contains sensitive information "
#~ "that you want to keep secure inside your firewall, then you can use a "
#~ "Traffic Server outside the firewall as a reverse proxy for that origin "
#~ "server. When outside clients try to access the origin server, the "
#~ "requests instead go to Traffic Server. If the desired content is *not* "
#~ "sensitive, then it can be served from the cache. If the content is "
#~ "sensitive and not cacheable, then Traffic Server obtains the content "
#~ "from the origin server (the firewall allows only Traffic Server access "
#~ "to the origin server). The sensitive content resides on the origin "
#~ "server, safely inside the firewall."
#~ msgstr ""
#~ "Traffic Server はオリジンサーバーにセキュリティを提供するためにリバースプ"
#~ "ロキシーモードで使用できます。もしファイアーウォールの内側にあるオリジン"
#~ "サーバーが安全にしておきたいセンシティブな情報を持っている場合、Traffic "
#~ "Server をファイアーウォールの外側におき、そのオリジンサーバーのためのリ"
#~ "バースプロキシーとして使用できます。外部のクライアントがそのオリジンサー"
#~ "バーにアクセスを試みるとリクエストは Traffic Server に向かいます。もし求"
#~ "められたコンテンツがセンシティブでは\\ *ない*\\ 場合、それはキャッシュか"
#~ "ら提供されます。もしコンテンツがセンシティブでありキャッシュ不可能な場"
#~ "合、Traffic Server はオリジンサーバーからコンテンツを取得します(ファイ"
#~ "アーウォールはオリジンサーバーへのアクセスを Traffic Server にのみ許しま"
#~ "す)。センシティブなコンテンツは安全なファイアーウォールの内側のオリジン"
#~ "サーバー上にあります。"

#~ msgid ""
#~ "When a browser makes a request, it normally sends that request directly "
#~ "to the origin server. When Traffic Server is in reverse proxy mode, it "
#~ "intercepts the request before it reaches the origin server. Typically, "
#~ "this is done by setting up the DNS entry for the origin server (i.e., "
#~ "the origin server's 'advertised' hostname) so it resolves to the Traffic "
#~ "Server IP address. When Traffic Server is configured as the origin "
#~ "server, the browser connects to Traffic Server rather than the origin "
#~ "server. For additional information, see `HTTP Reverse Proxy`_."
#~ msgstr ""
#~ "ブラウザーがリクエストを行うとき、通常はリクエストを直接オリジンサーバー"
#~ "に送信します。Traffic Server がリバースプロキシーモードになっているときは"
#~ "リクエストがオリジンサーバーに届く前に Traffic Server が横取りします。通"
#~ "常これはオリジンサーバーの DNS エントリー(オリジンサーバーの'広告され"
#~ "た'ホスト名)を Traffic Server の IP アドレスに解決されるように設定すれば"
#~ "完了です。Traffic Server がオリジンサーバーとして設定されている場合、ブラ"
#~ "ウザーはオリジンサーバーではなく Traffic Server に接続します。より詳しく"
#~ "は `HTTP リバースプロキシー`_\\ を見てください。"

#~ msgid ""
#~ "Traffic Server locates a map rule in the ``remap.config`` file and "
#~ "remaps the request to the specified origin server (``realhost.com``)."
#~ msgstr ""
#~ "Traffic Server は ``remap.config`` ファイル内にあるマップルールを見つけ、"
#~ "リクエストを指定されたオリジンサーバー(``realhost.com``)にリマップしま"
#~ "す。"

#~ msgid ""
#~ "Traffic Server opens an HTTP connection to the origin server. (If the "
#~ "request is not able to be served from cache)"
#~ msgstr ""
#~ "Traffic Server は オリジンサーバーへの HTTP コネクションを開きます。(もし"
#~ "リクエストにキャッシュから応えられなかった場合)"

#~ msgid ""
#~ "If the request is a cache hit and the content is fresh, then Traffic "
#~ "Server sends the requested object to the client from the cache. "
#~ "Otherwise, Traffic Server obtains the requested object from the origin "
#~ "server, sends the object to the client, and saves a copy in its cache."
#~ msgstr ""
#~ "もしリクエストがキャッシュにヒットしコンテンツが新鮮であれば、Traffic "
#~ "Server はリクエストされたオブジェクトをキャッシュからクライアントに送信し"
#~ "ます。そうではなく、Traffic Server がオリジンサーバーからリクエストされた"
#~ "オブジェクトを取得した場合は、そのオブジェクトをクライアントに送信し、コ"
#~ "ピーをキャッシュに保存します。"

#~ msgid ""
#~ "Origin servers often send redirect responses back to browsers "
#~ "redirecting them to different pages. For example, if an origin server is "
#~ "overloaded, then it might redirect browsers to a less loaded server. "
#~ "Origin servers also redirect when web pages that have moved to different "
#~ "locations. When Traffic Server is configured as a reverse proxy, it must "
#~ "readdress redirects from origin servers so that browsers are redirected "
#~ "to Traffic Server and *not* to another origin server."
#~ msgstr ""
#~ "オリジンサーバーはしばしばブラウザーを他のページにリダイレクトするために"
#~ "リダイレクトレスポンスを返します。例えば、オリジンサーバーが過負荷になっ"
#~ "た場合には負荷の少ないサーバーへブラウザーをリダイレクトするかもしれませ"
#~ "ん。オリジンサーバーはウェブページが異なる場所に移動された場合にもリダイ"
#~ "レクトを行います。Traffic Server がリバースプロキシーとして設定されている"
#~ "場合、ブラウザーが他のオリジンサーバー\\ *ではなく* Traffic Server にリダ"
#~ "イレクトされるように、リダイレクト先をオリジンサーバーから書き換えなけれ"
#~ "ばなりません。"

#~ msgid ""
#~ "A **map rule** translates the URL in client requests into the URL where "
#~ "the content is located. When Traffic Server is in reverse proxy mode and "
#~ "receives an HTTP client request, it first constructs a complete request "
#~ "URL from the relative URL and its headers. Traffic Server then looks for "
#~ "a match by comparing the complete request URL with its list of target "
#~ "URLs in the :file:`remap.config` file. For the request URL to match a "
#~ "target URL, the following conditions must be true:"
#~ msgstr ""
#~ "\\ **マップルール**\\ はクライアントのリクエストに含まれる URL をコンテン"
#~ "ツが存在する場所に変換します。Traffic Server がリバースプロキシーモード"
#~ "で HTTP クライアントリクエストを受け取ると、相対 URL とヘッダーから完全"
#~ "な URL を組み立てます。そしてその完全な URL と :file:`remap.config` ファ"
#~ "イル内のターゲット URL とを比較し、マッチするものを探します。ターゲット "
#~ "URL にマッチするリクエスト URL は次の条件を満たさなければなりません"

#~ msgid "The scheme of both URLs must be the same"
#~ msgstr "URL のスキームが同じであること"

#~ msgid ""
#~ "The path portion of the target URL must match a prefix of the request "
#~ "URL path"
#~ msgstr ""
#~ "ターゲット URL のパス部分がリクエスト URL のパスの先頭と一致すること。"

#~ msgid ""
#~ "If Traffic Server finds a match, then it translates the request URL into "
#~ "the replacement URL listed in the map rule: it sets the host and path of "
#~ "the request URL to match the replacement URL. If the URL contains path "
#~ "prefixes, then Traffic Server removes the prefix of the path that "
#~ "matches the target URL path and substitutes it with the path from the "
#~ "replacement URL. If two mappings match a request URL, then Traffic "
#~ "Server applies the first mapping listed in the :file:`remap.config` file."
#~ msgstr ""
#~ "Traffic Server がマッチするものを見つけた場合、リクエスト URL をマップ"
#~ "ルールの置換 URL に変換します。リクエスト URL のホストとパスを置換 URL に"
#~ "一致するようにセットします。もし URL がパスのプレフィックスを持っている場"
#~ "合、Traffic Server はターゲット URL のパスからプレフィックスを取り除き、"
#~ "置換 URL のパス部分と置き換えます。もしリクエスト URL にマッチするものが2"
#~ "つあった場合、Traffic Server は :file:`remap.config` ファイル内で先にマッ"
#~ "チするほうを適用します。"

#~ msgid ""
#~ "A **reverse-map rule** translates the URL in origin server redirect "
#~ "responses to point to Traffic Server so that clients are **redirected** "
#~ "to Traffic Server instead of accessing an origin server directly. For "
#~ "example, if there is a directory ``/pub`` on an origin server at ``www."
#~ "molasses.com`` and a client sends a request to that origin server for ``/"
#~ "pub``, then the origin server might reply with a redirect by sending the "
#~ "Header ``Location: http://www.test.com/pub/`` to let the client know "
#~ "that it was a directory it had requested, not a document (a common use "
#~ "of redirects is to normalize URLs so that clients can bookmark documents "
#~ "properly)."
#~ msgstr ""
#~ "\\ **リバースマップルール**\\ はクライアントがオリジンサーバーに直接アク"
#~ "セスする代わりに Traffic Server に\\ **リダイレクト**\\ されるようにする"
#~ "ために、オリジンサーバーのリダイレクトレスポンス内の URL を Traffic "
#~ "Server に向かうように変換します。例えば、``www.molasses.com`` というオリ"
#~ "ジンサーバーに ``/pub`` というディレクトリがあり、クライアントがそのオリ"
#~ "ジンサーバーに ``/pub`` のリクエストを送信すると、オリジンサーバーはリク"
#~ "エストされたものがドキュメントではなくディレクトリであることを知らせるた"
#~ "めに ``Loacation http://www.test.com/pub/`` ヘッダーによるリダイレクトで"
#~ "応答するかもしれません。(リダイレクトの一般的な使われ方はクライアントがド"
#~ "キュメントを正しくブックマークできるようにする URL の正規化です。) 。"

#~ msgid ""
#~ "Both map and reverse-map rules consist of a **target** (origin) URL and "
#~ "a **replacement** (destination) URL. In a **map rule**, the target URL "
#~ "points to Traffic Server and the replacement URL specifies where the "
#~ "original content is located. In a **reverse-map rule**, the target URL "
#~ "specifies where the original content is located and the replacement URL "
#~ "points to Traffic Server. Traffic Server stores mapping rules in the "
#~ "``remap.config`` file located in the Traffic Server ``config`` directory."
#~ msgstr ""
#~ "マップルールとリバースマップルールはどちらも\\ **ターゲット** (オリジン) "
#~ "URL と\\ **置換**\\ (宛先) URL で構成されます。\\ **マップルール**\\ で"
#~ "は、ターゲット URL は Traffic Server を指し、置換 URL オリジナルコンテン"
#~ "トがある場所を指しています。\\ **リバースマップルール**\\ では、ターゲッ"
#~ "ト URL はオリジナルコンテントがある場所を指し、置換 URL は Traffic "
#~ "Server を指しています。 Traffic Server はマッピングルールを Traffic "
#~ "Server の ``config`` ディレクトリにある ``remap.config`` に保存します。"

#~ msgid "To create mapping rules"
#~ msgstr "マッピングルールを作成するには"

#~ msgid ""
#~ "Enter the map and reverse-map rules into the :file:`remap.config` file"
#~ msgstr ""
#~ ":file:`remap.config` ファイルにマップルールとリバースマップルールを入力し"
#~ "てください。"

#~ msgid "To enable HTTP reverse proxy, follow the steps below."
#~ msgstr ""
#~ "HTTP リバースプロキシーを有効にするには次のステップに従ってください。"

#~ msgid "Edit the following variable in :file:`records.config`"
#~ msgstr ":file:`records.config` にある次の変数を編集してください。"

#~ msgid ":ts:cv:`proxy.config.reverse_proxy.enabled`"
#~ msgstr ":ts:cv:`proxy.config.reverse_proxy.enabled`"

#~ msgid ""
#~ "Configure Traffic Server to retain the client host header information in "
#~ "a request during translation (:ts:cv:`proxy.config.url_remap."
#~ "pristine_host_hdr`)"
#~ msgstr ""
#~ "Traffic Server がリクエストを変換する際にホストヘッダーの情報を維持するよ"
#~ "うに設定する (:ts:cv:`proxy.config.url_remap.pristine_host_hdr`)"

#~ msgid ""
#~ "Configure Traffic Server to serve requests only to the origin servers "
#~ "listed in the mapping rules. As a result, requests to origin servers not "
#~ "listed in the mapping rules are not served. (:ts:cv:`proxy.config."
#~ "url_remap.remap_required`)"
#~ msgstr ""
#~ "Traffic Server がマッピングルールのリストに存在するオリジンサーバーへのリ"
#~ "クエストのみに応えるように設定する。結果として、リストに存在しないオリジ"
#~ "ンサーバーへのリクエストは処理されません。(:ts:cv:`proxy.config."
#~ "url_remap.remap_required`)"

#~ msgid ""
#~ "Specify an alternate URL to which incoming requests from older clients "
#~ "(i.e., ones that do not provide ``Host`` headers) are directed (:ts:cv:"
#~ "`proxy.config.header.parse.no_host_url_redirect`)"
#~ msgstr ""
#~ "古めのクライアントから届くリクエスト (例 ``Host`` ヘッダーを含まないも"
#~ "の) のリダイレクト先となる代替 URL を指定する(:ts:cv:`proxy.config."
#~ "header.parse.no_host_url_redirect`)"

#~ msgid ""
#~ "Don't forget to run the command :option:`traffic_line -x` to apply the "
#~ "configuration changes."
#~ msgstr ""
#~ "設定の変更を適用するために :option:`traffic_line -x` コマンドを実行するの"
#~ "を忘れないでください。"

#~ msgid ""
#~ "You can configure Traffic Server to perform permanent or temporary "
#~ "redirects. **Permanent redirects** notify the browser of the URL change "
#~ "(by returning the HTTP status code **``301``**) so that the browser can "
#~ "update bookmarks. **Temporary redirects** notify the browser of the URL "
#~ "change for the current request only (by returning the HTTP status code "
#~ "**``307``** )."
#~ msgstr ""
#~ "Traffic Server を恒久的または一時的なリダイレクトを行うように設定できま"
#~ "す。\\ **恒久的なリダイレクト**\\ はブラウザーがブックマークを更新できる"
#~ "ようにURL の変更を(HTTP ステータスコード **``301``** を返すことで) ブラウ"
#~ "ザーに通知します。\\ **一時的なリダイレクト**\\ は今回のリクエストに限っ"
#~ "た URL の変更を(HTTP ステータスコード **``307``** を返すことで)ブラウザー"
#~ "に通知します。"

#~ msgid "To set redirect rules"
#~ msgstr "リダイレクトルールをセットするには"

#~ msgid ""
#~ "For each redirect you want to set enter a mapping rule in the :file:"
#~ "`remap.config` file"
#~ msgstr ""
#~ "各リダイレクトごとに :file:`remap.config` ファイルにマッピングルールを入"
#~ "力してください。"
